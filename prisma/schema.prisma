// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role Enum
enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  COORDINATOR
}

// User Model
model User {
  id         String       @id @default(uuid())
  username   String       @unique
  email      String       @unique
  password   String
  role       Role
  teacherOf  Class[]      @relation("TeacherClasses")
  studentOf  Class[]      @relation("StudentClasses")
  lessons    Lesson[]     @relation("UserLessons")
  attendance Attendance[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  resetToken String?
  resetTokenExpiry DateTime?
}

// Class Model
model Class {
  id            String         @id @default(uuid())
  name          String         @unique
  teacher       User           @relation("TeacherClasses", fields: [teacherId], references: [id])
  teacherId     String
  students      User[]         @relation("StudentClasses")
  lessons       Lesson[]
  announcements Announcement[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Lesson Model
model Lesson {
  id          String       @id @default(uuid())
  title       String
  description String
  class       Class        @relation(fields: [classId], references: [id])
  classId     String
  teacher     User         @relation("UserLessons", fields: [teacherId], references: [id])
  teacherId   String
  attendance  Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Attendance Model
model Attendance {
  id        String           @id @default(uuid())
  lesson    Lesson           @relation(fields: [lessonId], references: [id])
  lessonId  String
  student   User             @relation(fields: [studentId], references: [id])
  studentId String
  status    AttendanceStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

// Announcement Model
model Announcement {
  id        String   @id @default(uuid())
  title     String
  message   String
  class     Class?   @relation(fields: [classId], references: [id])
  classId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
